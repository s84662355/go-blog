{"remainingRequest":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/src/views/system/menu/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/src/views/system/menu/index.vue","mtime":1608023738749},{"path":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { deepClone } from '@/utils'\nimport { getMenus, addMenu, updateMenu, deleteMenu } from '@/api/menu'\nconst defaultMenu = {\n  id: '',\n  name: '',\n  path: '',\n  component: '',\n  redirect: '',\n  url: '',\n  meta_title: '',\n  meta_icon: '#',\n  meta_nocache: true,\n  alwaysshow: true,\n  meta_affix: false,\n  hidden: false,\n  pid: 0,\n  sort: '0',\n  status: true\n}\nexport default {\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        1: 'success',\n        0: 'info'\n      }\n      return statusMap[status]\n    },\n    statusNameFilter(status) {\n      const statusMap = {\n        1: '启动',\n        0: '停止'\n      }\n      return statusMap[status]\n    }\n  },\n  data() {\n    const validateRequire = (rule, value, callback) => {\n      if (value === '') {\n        this.$message({\n          message: rule.field + '为必填项',\n          type: 'error'\n        })\n        callback(new Error(rule.field + '为必填项'))\n      } else {\n        callback()\n      }\n    }\n    return {\n      Menu: Object.assign({}, defaultMenu),\n      routes: [],\n      MenusList: [],\n      dialogVisible: false,\n      dialogType: 'new',\n      checkStrictly: false,\n      rules: {\n        name: [{ validator: validateRequire }],\n        path: [{ validator: validateRequire }],\n        component: [{ validator: validateRequire }],\n        url: [{ validator: validateRequire }]\n      },\n      defaultProps: {\n        children: 'children',\n        label: 'title'\n      }\n    }\n  },\n  computed: {\n    routesData() {\n      return this.routes\n    }\n  },\n  created() {\n    // Mock: get all routes and Menus list from server\n    this.getMenus()\n  },\n  methods: {\n    async getMenus() {\n      const res = await getMenus()\n      this.MenusList = res.data\n    },\n    handleAddMenu(scope) {\n      this.dialogType = 'new'\n      this.dialogVisible = true\n      this.Menu.pid = scope.row ? scope.row.id : 0\n      this.$nextTick(() => {\n        this.$refs['formData'].clearValidate()\n        this.$refs['formData'].resetFields()\n        this.Menu.status = true\n      })\n    },\n    handleEdit(scope) {\n      this.dialogType = 'edit'\n      this.dialogVisible = true\n      this.checkStrictly = true\n      this.Menu = deepClone(scope.row)\n      this.Menu.status = (this.Menu.status === 1) ? true : false\n      this.Menu.meta_nocache = (this.Menu.meta_nocache ===1) ? true : false\n      this.Menu.hidden = (this.Menu.hidden ===1) ? true : false\n      this.Menu.alwaysshow = (this.Menu.alwaysshow ===1) ? true : false\n      this.$nextTick(() => {\n        this.$refs['formData'].clearValidate()\n      })\n    },\n    handleDelete({ $index, row }) {\n      this.$confirm('Confirm to remove the Menu?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          await deleteMenu(row.id)\n          for (let index = 0; index < this.MenusList.length; index++) {\n            if (this.MenusList[index].id === row.id) {\n              row.status = 0\n              this.MenusList.splice(index, 1, Object.assign({}, row))\n              break\n            }\n          }\n          // this.MenusList.splice($index, 1)\n          this.$message({\n            type: 'success',\n            message: 'Delete succed!'\n          })\n        })\n        .catch(err => {\n          console.error(err)\n        })\n    },\n    confirmMenu() {\n      const isEdit = this.dialogType === 'edit'\n      this.$refs['formData'].validate((valid) => {\n        if (!valid) {\n          return false\n        }\n        if (isEdit) {\n          this.Menu.sort = String(this.Menu.sort)\n          updateMenu(this.Menu.id, this.Menu).then(response => {\n            for (let index = 0; index < this.MenusList.length; index++) {\n              if (this.MenusList[index].id === this.Menu.id) {\n                this.Menu.status = this.Menu.status ? 1 : 0\n                this.MenusList.splice(index, 1, Object.assign({}, this.Menu))\n                break\n              }\n            }\n            const { path, id, name } = this.Menu\n            this.dialogVisible = false\n            this.$notify({\n              title: 'Success',\n              dangerouslyUseHTMLString: true,\n              message: `\n          <div>Menu Id: ${id}</div>\n          <div>Menu Name: ${name}</div>\n          <div>path: ${path}</div>\n        `,\n              type: 'success'\n            })\n          }).catch(err => {\n            console.log(err)\n          })\n        } else {\n          addMenu(this.Menu).then(response => {\n            this.Menu.id = response.data.id\n            this.Menu.status = (response.data.status === 1) ? 1 : 0\n            this.Menu.level = this.Menu.level + 1\n            this.MenusList.push(this.Menu)\n            const { path, id, name } = this.Menu\n            this.dialogVisible = false\n            this.$notify({\n              title: 'Success',\n              dangerouslyUseHTMLString: true,\n              message: `\n          <div>Menu Id: ${id}</div>\n          <div>Menu Name: ${name}</div>\n          <div>path: ${path}</div>\n        `,\n              type: 'success'\n            })\n          }).catch(err => {\n            console.log(err)\n          })\n        }\n      })\n    }\n\n  }\n}\n",null]}