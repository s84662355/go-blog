{"remainingRequest":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/src/views/cate/components/ArticleDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/src/views/cate/components/ArticleDetail.vue","mtime":1608654659374},{"path":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenjiahao/GoDemo/go-blog/vue-element-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Tinymce from '@/components/Tinymce'\nimport Upload from '@/components/Upload/SingleImage3'\nimport MDinput from '@/components/MDinput'\nimport Sticky from '@/components/Sticky' // 粘性header组件\nimport { validURL } from '@/utils/validate'\nimport { fetchArticle, cateList,createArticle,updateArticle,cateCreate,cateUpdate } from '@/api/article'\n\nimport { searchUser } from '@/api/remote-search'\nimport Warning from './Warning'\n \n\nconst defaultForm = {\n \n  name: '', // 文章题目\n \n\n}\n\n \n\nexport default {\n  name: 'CateDetail',\n  components: { Tinymce, MDinput, Upload, Sticky, Warning, CommentDropdown,  SourceUrlDropdown },\n  props: {\n    isEdit: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    const validateRequire = (rule, value, callback) => {\n      if (value === '') {\n        this.$message({\n          message: rule.field + '为必传项',\n          type: 'error'\n        })\n        callback(new Error(rule.field + '为必传项'))\n      } else {\n        callback()\n      }\n    }\n    const validateSourceUri = (rule, value, callback) => {\n      if (value) {\n        if (validURL(value)) {\n          callback()\n        } else {\n          this.$message({\n            message: '外链url填写不正确',\n            type: 'error'\n          })\n          callback(new Error('外链url填写不正确'))\n        }\n      } else {\n        callback()\n      }\n    }\n    return {\n      postForm: Object.assign({}, defaultForm),\n \n      loading: false,\n      userListOptions: [],\n      rules: {\n         name: [{ validator: validateRequire }],\n        },\n      tempRoute: {},\n  \n \n    }\n  },\n  computed: {\n    contentShortLength() {\n      return this.postForm.content_short.length\n    },\n    lang() {\n      return this.$store.getters.language\n    },\n    displayTime: {\n      // set and get is useful when the data\n      // returned by the back end api is different from the front end\n      // back end return => \"2013-06-25 06:59:25\"\n      // front end need timestamp => 1372114765000\n      get() {\n        return (+new Date(this.postForm.display_time))\n      },\n      set(val) {\n        this.postForm.display_time = new Date(val)\n      }\n    }\n  },\n  created() {\n    if (this.isEdit) {\n      const id = this.$route.params && this.$route.params.id\n      this.fetchData(id)\n    }\n    this.tempRoute = Object.assign({}, this.$route)\n  },\n  methods: {\n    fetchData(id) {\n      fetchArticle(id).then(response => {\n        this.postForm = response.data\n        this.postForm.comment_disabled = response.data.comment_disabled==0?false:true\n        this.postForm.author=response.data.authorname\n        // set tagsview title\n        this.setTagsViewTitle()\n\n        // set page title\n        this.setPageTitle()\n      }).catch(err => {\n        console.log(err)\n      })\n    },\n    setTagsViewTitle() {\n      const title = this.lang === 'zh' ? '编辑文章' : 'Edit Article'\n      const route = Object.assign({}, this.tempRoute, { title: `${title}-${this.postForm.id}` })\n      this.$store.dispatch('tagsView/updateVisitedView', route)\n    },\n    setPageTitle() {\n      const title = 'Edit Article'\n      document.title = `${title} - ${this.postForm.id}`\n    },\n    submitForm() {\n      this.$refs.postForm.validate(valid => {\n        if (valid) {\n          this.loading = true\n          if (this.isEdit) {\n            updateCreate(this.postForm).then(() => {\n              this.loading = false\n              this.$notify({\n                title: 'Success',\n                dangerouslyUseHTMLString: true,\n                message: '修改成功',\n                type: 'success',\n                duration: 2000\n              })\n            })\n          }else{\n            cateCreate(this.postForm).then(() => {\n              this.loading = false\n              this.$notify({\n                title: 'Success',\n                dangerouslyUseHTMLString: true,\n                message: '添加成功',\n                type: 'success',\n                duration: 2000\n              })\n            })\n\n\n          }\n\n\n          // this.$notify({\n          //   title: '成功',\n          //   message: '发布文章成功',\n          //   type: 'success',\n          //   duration: 2000\n          // })\n          // this.postForm.status = 'published'\n          this.loading = false\n        } else {\n          console.log('error submit!!')\n          return false\n        }\n\n\n\n\n      })\n    },\n    draftForm() {\n      if (this.postForm.content.length === 0 || this.postForm.title.length === 0) {\n        this.$message({\n          message: '请填写必要的标题和内容',\n          type: 'warning'\n        })\n        return\n      }\n      this.$message({\n        message: '保存成功',\n        type: 'success',\n        showClose: true,\n        duration: 1000\n      })\n      this.postForm.status =0\n      // this.postForm.status = 'draft'\n    },\n    getRemoteUserList(query) {\n      searchUser(query).then(response => {\n        if (!response.data.items) return\n        this.userListOptions = response.data.items.map(v => v.name)\n      })\n    }\n  }\n}\n",null]}